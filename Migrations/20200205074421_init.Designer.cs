// <auto-generated />
using System;
using GliwickiDzik.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GliwickiDzik.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200205074421_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0");

            modelBuilder.Entity("GliwickiDzik.API.Helpers.ExerciseForTraining", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Reps")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sets")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TrainingModelTrainingId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TrainingModelTrainingId");

                    b.ToTable("ExerciseForTraining");
                });

            modelBuilder.Entity("GliwickiDzik.API.Helpers.Params.TrainingsForPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlanModelPlanId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlanModelPlanId");

                    b.ToTable("TrainingsForPlan");
                });

            modelBuilder.Entity("GliwickiDzik.API.Helpers.TrainingId", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrainId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TrainingsForPlanId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TrainingsForPlanId1")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TrainingsForPlanId2")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TrainingsForPlanId3")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TrainingsForPlanId4")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TrainingsForPlanId5")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TrainingsForPlanId6")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TrainingsForPlanId");

                    b.HasIndex("TrainingsForPlanId1");

                    b.HasIndex("TrainingsForPlanId2");

                    b.HasIndex("TrainingsForPlanId3");

                    b.HasIndex("TrainingsForPlanId4");

                    b.HasIndex("TrainingsForPlanId5");

                    b.HasIndex("TrainingsForPlanId6");

                    b.ToTable("TrainingId");
                });

            modelBuilder.Entity("GliwickiDzik.API.Models.CommentModel", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CommenterId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfCreated")
                        .HasColumnType("TEXT");

                    b.Property<int>("TrainingPlanId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VoteCounter")
                        .HasColumnType("INTEGER");

                    b.HasKey("CommentId");

                    b.HasIndex("CommenterId");

                    b.HasIndex("TrainingPlanId");

                    b.ToTable("CommentModel");
                });

            modelBuilder.Entity("GliwickiDzik.API.Models.ExerciseModel", b =>
                {
                    b.Property<int>("ExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("ExerciseId");

                    b.ToTable("ExerciseModel");
                });

            modelBuilder.Entity("GliwickiDzik.API.Models.LikeModel", b =>
                {
                    b.Property<int>("UserIdLikesPlanId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlanIdIsLikedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlanModelPlanId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserModelUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserIdLikesPlanId", "PlanIdIsLikedByUserId");

                    b.HasIndex("PlanIdIsLikedByUserId");

                    b.HasIndex("PlanModelPlanId");

                    b.HasIndex("UserModelUserId");

                    b.ToTable("LikeModel");
                });

            modelBuilder.Entity("GliwickiDzik.API.Models.MessageModel", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfRead")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfSent")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RecipientDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RecipientId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SenderDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SenderId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MessageId");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("MessageModel");
                });

            modelBuilder.Entity("GliwickiDzik.API.Models.PhotoModel", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfAdded")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PhotoId");

                    b.HasIndex("UserId");

                    b.ToTable("PhotoModel");
                });

            modelBuilder.Entity("GliwickiDzik.API.Models.PlanModel", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CommentCounter")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("LikeCounter")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Owner")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlanId");

                    b.HasIndex("UserId");

                    b.ToTable("TrainingPlanModel");
                });

            modelBuilder.Entity("GliwickiDzik.API.Models.TrainingModel", b =>
                {
                    b.Property<int>("TrainingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Day")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TrainingId");

                    b.ToTable("TrainingModel");
                });

            modelBuilder.Entity("GliwickiDzik.Models.UserModel", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("BicepsSize")
                        .HasColumnType("REAL");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<float>("Growth")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("BLOB");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.Property<float>("Weight")
                        .HasColumnType("REAL");

                    b.HasKey("UserId");

                    b.ToTable("UserModel");
                });

            modelBuilder.Entity("GliwickiDzik.API.Helpers.ExerciseForTraining", b =>
                {
                    b.HasOne("GliwickiDzik.API.Models.TrainingModel", null)
                        .WithMany("Exercises")
                        .HasForeignKey("TrainingModelTrainingId");
                });

            modelBuilder.Entity("GliwickiDzik.API.Helpers.Params.TrainingsForPlan", b =>
                {
                    b.HasOne("GliwickiDzik.API.Models.PlanModel", null)
                        .WithMany("Trainings")
                        .HasForeignKey("PlanModelPlanId");
                });

            modelBuilder.Entity("GliwickiDzik.API.Helpers.TrainingId", b =>
                {
                    b.HasOne("GliwickiDzik.API.Helpers.Params.TrainingsForPlan", null)
                        .WithMany("Friday")
                        .HasForeignKey("TrainingsForPlanId");

                    b.HasOne("GliwickiDzik.API.Helpers.Params.TrainingsForPlan", null)
                        .WithMany("Monday")
                        .HasForeignKey("TrainingsForPlanId1");

                    b.HasOne("GliwickiDzik.API.Helpers.Params.TrainingsForPlan", null)
                        .WithMany("Saturday")
                        .HasForeignKey("TrainingsForPlanId2");

                    b.HasOne("GliwickiDzik.API.Helpers.Params.TrainingsForPlan", null)
                        .WithMany("Sunday")
                        .HasForeignKey("TrainingsForPlanId3");

                    b.HasOne("GliwickiDzik.API.Helpers.Params.TrainingsForPlan", null)
                        .WithMany("Thursday")
                        .HasForeignKey("TrainingsForPlanId4");

                    b.HasOne("GliwickiDzik.API.Helpers.Params.TrainingsForPlan", null)
                        .WithMany("Tuesday")
                        .HasForeignKey("TrainingsForPlanId5");

                    b.HasOne("GliwickiDzik.API.Helpers.Params.TrainingsForPlan", null)
                        .WithMany("Wednesday")
                        .HasForeignKey("TrainingsForPlanId6");
                });

            modelBuilder.Entity("GliwickiDzik.API.Models.CommentModel", b =>
                {
                    b.HasOne("GliwickiDzik.Models.UserModel", "Commenter")
                        .WithMany()
                        .HasForeignKey("CommenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GliwickiDzik.API.Models.PlanModel", "TrainingPlan")
                        .WithMany("Comments")
                        .HasForeignKey("TrainingPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GliwickiDzik.API.Models.LikeModel", b =>
                {
                    b.HasOne("GliwickiDzik.API.Models.PlanModel", "PlanIsLiked")
                        .WithMany("UserLikes")
                        .HasForeignKey("PlanIdIsLikedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GliwickiDzik.API.Models.PlanModel", null)
                        .WithMany("PlanIsLiked")
                        .HasForeignKey("PlanModelPlanId");

                    b.HasOne("GliwickiDzik.Models.UserModel", "UserLikes")
                        .WithMany("PlanIsLiked")
                        .HasForeignKey("UserIdLikesPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GliwickiDzik.Models.UserModel", null)
                        .WithMany("UserLikes")
                        .HasForeignKey("UserModelUserId");
                });

            modelBuilder.Entity("GliwickiDzik.API.Models.MessageModel", b =>
                {
                    b.HasOne("GliwickiDzik.Models.UserModel", "Recipient")
                        .WithMany("MessagesReceived")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GliwickiDzik.Models.UserModel", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GliwickiDzik.API.Models.PhotoModel", b =>
                {
                    b.HasOne("GliwickiDzik.Models.UserModel", "User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GliwickiDzik.API.Models.PlanModel", b =>
                {
                    b.HasOne("GliwickiDzik.Models.UserModel", "User")
                        .WithMany("TrainingPlans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
